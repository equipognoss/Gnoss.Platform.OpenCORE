version: '3.8'

services:
        
  web:
    image: gnoss/gnoss.web.opencore:${version}
    mem_limit: 700m
    memswap_limit: 700m
    restart: always
    env_file:
      - ${ruta_docker_env}
    environment:
      #Servicios
      Servicios__autocompletar: "${schema_servicios}://${dominio_servicios}/autocompletar/autocompletar"
      Servicios__contextosHome: "${schema_servicios}://${dominio_servicios}/resultados/CargadorContextoMensajes"
      Servicios__etiquetadoAutomatico: "${schema_servicios}://${dominio_servicios}/autocompletaretiquetas/EtiquetadoAutomatico"
      Servicios__urlApi: ${schema_servicios}://${dominio_servicios}/api
      Servicios__urlBase: https://${dominio_web}
      Servicios__urlContent: "${schema_servicios}://${dominio_servicios}"
      Servicios__urlFacetas__externo: "${schema_servicios}://${dominio_servicios}/facetas/CargadorFacetas"
      Servicios__urlLogin: "${schema_servicios}://${dominio_servicios}/login"
      Servicios__urlResultados__externo: "${schema_servicios}://${dominio_servicios}/resultados/CargadorResultados"
      Servicios__urlStatic: "${schema_servicios}://${dominio_servicios}/static"
      Virtuoso__Escritura__VirtuosoMaster: ${virtuosoConnectionString}
      virtuosoHome__VirtuosoEscrituraHome: ${virtuosoConnectionString_home}
    volumes:
      - ./logs/web:/app/logs
  
  login:
    image: gnoss/gnoss.web.login.opencore:${version}
    mem_limit: 200m
    memswap_limit: 200m
    restart: always
    env_file:
      - ${ruta_docker_env}
    environment:
     Servicios__urlBase: ${schema_servicios}://${dominio_servicios}
    volumes:
      - ./logs/login:/app/logs
  
  facets:
    image: gnoss/gnoss.web.facets.opencore:${version}
    mem_limit: 300m
    memswap_limit: 300m
    restart: always
    env_file:
      - ${ruta_docker_env}
    environment:
     Servicios__urlContent: "${schema_servicios}://${dominio_servicios}"
    volumes:
      - ./logs/facets:/app/logs
  
  results:
    image: gnoss/gnoss.web.results.opencore:${version}
    mem_limit: 300m
    memswap_limit: 300m
    restart: always
    env_file:
      - ${ruta_docker_env}
    environment:
     Servicios__urlBase: ${schema_servicios}://${dominio_servicios}
     Servicios__urlContent: "${schema_servicios}://${dominio_servicios}"
     Servicios__urlStatic: "${schema_servicios}://${dominio_servicios}/static"
    volumes:
      - ./logs/results:/app/logs
     
  intern:
    image: gnoss/gnoss.web.intern.opencore:${version}
    mem_limit: 200m
    memswap_limit: 200m
    restart: always
    env_file:
      - ${ruta_docker_env}
    environment:
     Servicios__urlContent: "${schema_servicios}://${dominio_servicios}"
    volumes:
      - ./logs/intern:/app/logs
      - ./content/doclinks:/app/doclinks
      - ./content/imagenes:/app/imagenes
      - ./content/ImagenesEnlaces:/app/ImagenesEnlaces
      - ./content/Videos:/app/Videos  
     
  ontologies:
    image: gnoss/gnoss.web.ontologies.opencore:${version}
    mem_limit: 200m
    memswap_limit: 200m
    restart: always
    env_file:
      - ${ruta_docker_env}
    environment:
     Servicios__urlContent: "${schema_servicios}://${dominio_servicios}"
     rutaOntologias: "/app/Ontologias/Archivos"
    volumes:
      - ./logs/ontologies:/app/logs
      - ./content/ontologies:/app/Ontologias
     
  documents:
    image: gnoss/gnoss.web.documents.opencore:${version}
    mem_limit: 200m
    memswap_limit: 200m
    restart: always
    env_file:
      - ${ruta_docker_env}
    environment:
     Servicios__urlContent: "${schema_servicios}://${dominio_servicios}"
    volumes:
      - ./logs/documents:/app/logs
      - ./content/Documentacion:/app/Documentacion
            
  autocomplete:
    image: gnoss/gnoss.web.autocomplete.opencore:${version}
    mem_limit: 200m
    memswap_limit: 200m
    restart: always
    env_file:
      - ${ruta_docker_env}
    environment:
     Servicios__urlContent: "${schema_servicios}://${dominio_servicios}"
    volumes:
      - ./logs/autocomplete:/app/logs
      
  api:
    image: gnoss/gnoss.web.api.opencore:${version}
    mem_limit: 300m
    memswap_limit: 300m
    restart: always
    env_file:
      - ${ruta_docker_env}
    environment:
     IpServicioSocketsOffline: ${IpServicioSocketsOffline}   
     PuertoServicioSocketsOffline: ${PortServicioSocketsOffline}                           
     Servicios__urlLogin: "${schema_servicios}://${dominio_servicios}/login"
     Servicios__urlFacetas__externo: "${schema_servicios}://${dominio_servicios}/facetas/CargadorFacetas"
     Servicios__urlResultados__externo: "${schema_servicios}://${dominio_servicios}/resultados/CargadorResultados"
     Servicios__autocompletar: "${schema_servicios}://${dominio_servicios}/autocompletar/autocompletar"
     Servicios__urlContent: "${schema_servicios}://${dominio_servicios}"
    volumes:
      - ./logs/api:/app/logs
      
  oauth:
    image: gnoss/gnoss.web.oauth.opencore:${version}
    mem_limit: 200m
    memswap_limit: 200m
    restart: always
    env_file:
      - ${ruta_docker_env}
    environment:
     IpServicioSocketsOffline: ${IpServicioSocketsOffline}
     PuertoServicioSocketsOffline: ${PortServicioSocketsOffline}
     Servicios__urlLogin: "${schema_servicios}://${dominio_servicios}/login"
     Servicios__urlFacetas__externo: "${schema_servicios}://${dominio_servicios}/facetas/CargadorFacetas"
     Servicios__urlResultados__externo: "${schema_servicios}://${dominio_servicios}/resultados/CargadorResultados"
     Servicios__autocompletar: "${schema_servicios}://${dominio_servicios}/autocompletar/autocompletar"
     Servicios__urlContent: "${schema_servicios}://${dominio_servicios}"
    volumes:
      - ./logs/oauth:/app/logs
      
  labeler:
    image: gnoss/gnoss.web.labeler.opencore:${version}
    mem_limit: 200m
    memswap_limit: 200m
    restart: always
    env_file:
      - ${ruta_docker_env}
    environment:
     Servicios__urlBase: ${schema_servicios}://${dominio_servicios}
     connectionType: "0"
    volumes:
      - ./logs/labeler:/app/logs
      - ./logs/labeler:/app/trazas

  identityserver:
    image: gnoss/gnoss.web.identityserver.opencore:${version}
    ports:
      - ${puerto_identityserver}:${identityserver_puerto_contenedor}
    restart: always
    env_file:
      - ${ruta_docker_env}
    environment:
      #Variables propias
      IssuerUri: ${Authority}
      scopeIdentity: ${scopeIdentity}
      clientSecretIdentity: ${clientSecretIdentity}
      clientIDIdentity: ${clientIDIdentity}
      segundostoken: ${segundostoken}
    volumes:
      - ./logs/identityservercore:${volume_app_logs}
      
  nginx:
    image: ${nginx_imagen}:${version}
    container_name: ${proyecto}_nginx
    ports:
      - "${puerto_nginx}:80"
      #- "${puerto_nginx_https}:443"
    restart: ${nginx_politica_reinicio}
    depends_on:
      - web
      - api
    volumes:
      - ${content_path}:/content
      - ./logs/nginx:/var/log/nginx
      #- web_certificate_crt_path:${web_certificate_crt_path}
      #- web_certificate_key_path:${web_certificate_key_path}
      #- api_certificate_crt_path:${api_certificate_crt_path}
      #- api_certificate_key_path:${api_certificate_key_path}
      #- services_certificate_crt_path:${services_certificate_crt_path}
      #- services_certificate_key_path:${services_certificate_key_path}
    environment:
      services_domain: "${dominio_servicios}"
    command: /bin/bash -c "envsubst '$${services_domain}  $${dominio}' < /etc/nginx/conf.d/gnoss_services.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"